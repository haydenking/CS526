---
title: "Map"
format: html
editor: visual
---
```{r}
library(tidyverse)
library(readxl)
library(scales)
library(ggplot2)
library(sf)
library(ggfx)
```
#create_inset
```{r}
create_inset <- function(map, style, n, inset_cutoff = c("top", "bottom"), cutoff_column, dollar, unit, merge_MSAs, netmigration) {
  inset_data <- map |>
    st_drop_geometry() |>
    filter(cutoff >= inset_cutoff,
           !is.na(Value))
  
  if (style == "top") {
    inset_data <- inset_data |>
      arrange(desc(Value))
  } else {
    inset_data <- inset_data |>
      arrange(Value)
  }
  
  inset_data <- inset_data |>
    slice(1:n) |>
    mutate(
      rank = as.character(row_number()),
      rank = if_else(as.numeric(rank) < 10, paste0(rank, ".   "), paste0(rank, ". "))
    )
  
    inset_data <- inset_data |>
      mutate(label = paste0(rank, name, ": ", dollar,sapply(Value, shorten), unit))
    
  if(merge_MSAs){
    counties = "Counties/MSAs"
  } else{
    counties = "Counties"
  }
  if(!netmigration){
    top = paste0("Top ", n)
    bottom = paste0("Bottom ", n)
  } else{
    top = "Highest Net In-Migration"
    bottom = "Highest Net Out-Migration"
    counties = "" #it would be too long
  }
  title_line =  paste0(if_else(style == "top", top, bottom), 
                      if_else(inset_cutoff > 0, paste0(" (min ", shorten(inset_cutoff), " ", cutoff_column, ")"), ""), 
                      ":\n")
  new_inset <- paste0(title_line, paste(inset_data$label, collapse = "\n"), "\n")
  
  return(new_inset)
}
```
#add_theme
```{r}
add_theme <- function(plot, title, subtitle, font_size, caption, inset_text, breaks, bubbles, max_bubble_size, continental) {
  caption_line_height = 0.025
  bubble_size_adjustment = if_else(bubbles, ((20-max_bubble_size)/10)*caption_line_height, 0)
  if(!is.na(breaks)[1]){
    break_adjustment = floor(-0.01+length(breaks)/5)*(0.75*caption_line_height) #this needs more fine tuning
  } else{
      break_adjustment = 0
    }
  
  if(bubbles){
    title_height = 1
  } else{
    title_height = 1.03
  }
  if(continental) {
    title_alignment = 0.5
  } else{
    title_alignment = 0.551
  }
  subtitle_offset = 0.06*(font_size/36)
  if(continental){continental_offset = 0.145}else{continental_offset = 0}
  
  plot <- plot +
    theme_minimal(base_family = "") +
    theme(
      legend.title = element_blank(),
      legend.text = element_text(size = 12, face = "bold"),
      legend.position = "bottom",
      legend.direction = "horizontal",
      legend.key.width = unit(if_else(is.na(breaks[1]), 1.5, 0.5), "cm"),
      legend.key.height = unit(0.5, "cm"),
      panel.grid = element_blank(),
      panel.background = element_rect(fill = "white", color = NA),
      plot.background = element_rect(fill = "white", color = NA),
      axis.title = element_blank(),
      axis.text = element_blank(),
      axis.ticks = element_blank(),
      legend.box.margin = margin(if_else(continental, 100, 40), 0, if_else(continental, -40, 0), if_else(continental, 0, 83)),
      plot.margin = margin(0, if_else(continental, -20, -20), 0, if_else(continental, -20, -110))
    ) +
    coord_sf(clip = "off") +
    annotation_custom(grid::textGrob(
      inset_text,
      x = unit(if_else(continental, 0.03, 0.57), "npc"),
      y = unit(-0.115 - continental_offset, "npc"),
      hjust = 0,
      vjust = 0,
      gp = grid::gpar(
        fontsize = 11,
        fontface = "bold",
        col = "black"
      )
    )) +
    annotation_custom(grid::textGrob(
      title,
      gp = grid::gpar(
        fontsize = font_size,
        fontface = "bold",
        col = "darkblue"
      ),
      x = unit(title_alignment, "npc"),
      y = unit(title_height, "npc"),
      hjust = 0.5
    )) +
    annotation_custom(grid::textGrob(
      caption,
      gp = grid::gpar(fontsize = 10, col = "#363c45"),
      x = unit(if_else(continental, 0.03, 0.128), "npc"),
      y = unit(if_else(bubbles,-0.24 + bubble_size_adjustment, -0.21 - break_adjustment) - continental_offset, "npc"),
      hjust = 0,
      vjust = 0
    ))
  if (!is.na(subtitle)) {
    plot <- plot +
      annotation_custom(grid::textGrob(
        subtitle,
        gp = grid::gpar(fontsize = 16, col = "darkblue", fontface = "bold"),
        x = unit(title_alignment, "npc"),
        y = unit(title_height - subtitle_offset, "npc"),
        hjust = 0.5
      ))
  }
  return(plot)
}
```
#handle_per_capita
```{r}
handle_per_capita <- function(map, per, subtitle) {
  
  if (per == "capita") {
      map <- map |> 
        mutate(Value = Value / avg_pop)
      #this code isn't very good, will rewrite
      # if(median(abs(map$Value),na.rm = T) > 1/100000) {
      #   map <- map |> 
      #     mutate(Value = Value *100000)
      #   subtitle <- if_else(is.na(subtitle), "Rate per 100k per year", subtitle)
      # } else if(median(abs(map$Value),na.rm = T) > 1/1000){
      #   map <- map |>
      #     mutate(Value = 1000 * Value)
      #   subtitle <- if_else(is.na(subtitle), "Rate per 1,000 per year", subtitle)
      # }
    } else if (per != "" & per != "year") {
    map <- map |>
      mutate(Value = Value / !!rlang::sym(per))
  }
  
  return(list(map = map, subtitle = subtitle))
}
```
#handle_bubbles
```{r}
handle_bubbles <- function(map, state_map, max_bubble_size, low_color, high_color, countylines, dollar, unit, region, highlight_color, netmigration) {
  map <- map |>
    mutate(Value = if_else(Value == 0, NA, Value),
      abs_value = abs(Value)) #just making sure
  min <- min(map$abs_value, na.rm = TRUE)
  max <- max(map$abs_value, na.rm = TRUE)
  min_bubble_size <- max_bubble_size * min / max
  
  if(netmigration) {
    map <- map |> 
      mutate(MigrationType = ifelse(Value > 0, "Net In-Migration", "Net Out-Migration"))
  }
  
  plot <- ggplot(data = map) + 
    with_shadow(
      geom_sf(
        aes(fill = ifelse(abs(Value) > 0, "Has Value", "No Value")),
        color = ifelse(countylines, "white", NA), size = 0.1, show.legend = FALSE
      ),
      x_offset = 3, y_offset = 3, sigma = 3, color = "grey70"
    )
  
  if (!is.null(state_map)) {
    plot <- plot +
      geom_sf(data = state_map, color = "black", fill = NA, size = 0.1)
  }
  if(!is.na(region)){
    plot <- plot +
      geom_sf(
        data = region,
        fill = highlight_color,
        color = "white"
      )
    } 
  plot <- plot +
    scale_fill_manual(
      values = c("Has Value" = if_else(netmigration, "beige", low_color), "No Value" = "grey90"),
      na.value = "grey90"
    ) + 
    scale_size_continuous(
      range = c(min_bubble_size, max_bubble_size),
      name = "",
      breaks = compute_breaks(map$abs_value),
      labels = append_unit(dollar, unit)
    ) + 
    geom_point(
      data = map,
      aes(x = x, y = y, size = abs_value, color = if(netmigration) MigrationType else "Has Value"),
      alpha = 0.5
    ) +
    scale_color_manual(
      values = if (netmigration) c("Net In-Migration" = high_color, "Net Out-Migration" = low_color) else c("Has Value" = high_color), na.translate = F
    )
    
  if (netmigration) {
    max_break <- max(compute_breaks(map$Value))
    max_value <- max(map$Value, na.rm = TRUE)
    legend_bubble_size <- max_bubble_size * sqrt(max_break / max_value)
    plot <- plot + guides(color = guide_legend(override.aes = list(size = legend_bubble_size)))
  } else{
    plot <- plot +
      guides(color = "none", size = guide_legend(override.aes = list(color = high_color)))
  }
  
  return(plot)
}
```
#handle_choropleth
```{r}
handle_chloropleth <- function(map, state_map, breaks, labels_manual, low_color, high_color, countylines, dollar, unit, region, highlight_color, netmigration, centered_at_0) {
  if (!is.na(breaks[1])) {
    if (centered_at_0) {
      breaks <- c(-abs(breaks), abs(breaks)) #net migration breaks must contain 0 and must be symmetrical
      breaks <- c(floor(min(map$Value, na.rm = T)),
                  breaks,
                  ceiling(max(map$Value, na.rm = T))) #round_to_sigfigs doesn't go below 0. I think this was because a negative endpoint was displayed and i didn't like it. Could modify the function and put that 
    } else {breaks <- c(round_to_sigfigs(min(map$Value, na.rm = TRUE), 2, "floor"),
                  breaks,
                  round_to_sigfigs(max(map$Value, na.rm = TRUE), 2, "ceiling"))
    }
    breaks <- unique(breaks)
    breaks <- sort(breaks)
    if (is.na(labels_manual[1])) { #I think this code doesn't work well for two-sided breaks iykwim
        formatted_labels <- paste0(dollar,
                                   label_comma()(head(breaks, -1)),
                                   " to ",
                                   dollar,
                                   label_comma()(breaks[-1]),
                                   unit)
        if (unit != "%") { #if we have dollar unit this probably doesn't work but I'll deal with that when it comes up
          formatted_labels[length(formatted_labels)] <- paste0(">",str_remove(formatted_labels[length(formatted_labels)], " to .*"), unit)

          formatted_labels[1] <- paste0("<",str_remove(formatted_labels[1], ".* to "))
        }
      } else {
        formatted_labels <- labels_manual
      }
    map <- map |>
      mutate(Category = cut(
        Value,
        breaks = breaks,
        include.lowest = TRUE,
        labels = formatted_labels
      ))
    color_column = "Category"
    if(centered_at_0){
      #length(breaks) should be even
      low_palette <- seq_gradient_pal(low_color, "beige")(seq(0, 1, length.out = length(breaks)/2))
      high_palette <- seq_gradient_pal("beige", high_color)(seq(0, 1, length.out = length(breaks)/2))
      color_palette <- c(low_palette[-length(low_palette)], high_palette)
    }else{
      color_palette <- seq_gradient_pal(low_color, high_color)(seq(0, 1, length.out = length(breaks) - 1))
      }
  } else{
    color_column = "Value"
  } #continuous choropleth
  
  plot <- ggplot(data = map) + 
      with_shadow(
        geom_sf(aes(fill = !!rlang::sym(color_column)), color = ifelse(countylines, "white", NA), size = 0.1),
        x_offset = 3, y_offset = 3, sigma = 3, color = "grey70"
      )
    if(!is.null(state_map)){
        plot <- plot +
      geom_sf(data = state_map, color = "black", fill = NA, size = 0.1)
  }
  if(!is.na(region)){
    plot <- plot +
      geom_sf(
        data = region,
        fill = highlight_color,
        color = "white"
      )
    }
  if (!is.na(breaks[1])) {
    plot <- plot +
      scale_fill_manual(
        values = color_palette,
        na.value = "grey90",
        name = "",
        na.translate = TRUE,
        labels = c(formatted_labels, "No Data"
        ))
  } else if (!netmigration) {
    plot <- plot +
      scale_fill_continuous(
        low = low_color,
        high = high_color,
        na.value = "white",
        name = "",
        labels = append_unit(dollar, unit)
      )
  } else if(is.na(breaks[1]) & netmigration){
      cat("Breaks must be supplied for net migration map.")
      quit()
    }
  return(list(plot = plot, breaks = breaks))
}
```

###map
```{r}
map <- function(data, county_map, MSA_map = NULL, state_map = NULL, title, font_size = NA, years = 2012:2021, bubbles = TRUE, unit = "", per = "", max_bubble_size = NA, continental = FALSE, high_color = "darkblue", low_color = "beige", highlight_color = "steelblue", countylines = FALSE, graphicspath, inset_cutoff = -1000000000, cutoff_column = "Value", breaks = NA, imputed_to_na = FALSE, na_to_0 = FALSE, caption_manual = "", labels_manual = NA, inset_style = "top", subtitle = NA, region_fips = NA, cbsa = NA, migration_type = NA, merge_MSAs = F, centered_at_0 = F, simulate = F) {
  #years should be a list of years. It can be specified 2019:2022 for example
    first_year <- min(years)
    last_year <- max(years)
    if("year" %in% colnames(data)){
      data <- data |>
      filter(year %in% years)
      }

  if(is.na(font_size)){
    font_size = min(36*38/nchar(title), 36)
    cat("Auto font size: ", font_size,"\n")
  }
  if (is.na(region_fips)[1] & !is.na(cbsa)) { #find region_fips from cbsa
    region_fips = MSAs |>
      filter(cbsa_code == cbsa) |>
      pull(fips) |>
      as.character()
  }
  netmigration = F
  if(!is.na(migration_type)){
    if(migration_type == "net"){
      centered_at_0 = T
      netmigration = T
    }
     data = get_migration_data(data, region_fips, migration_type, simulate)
  }
 

  if (per == "capita" & length(years) > 1 | per == "year") {
    num_years_ct = length(years[years < 2022])
    num_years_notct = length(years)
    data <- data |>
      mutate(
        num_years = if_else(substr(fips, 1, 2) == "09", num_years_ct, num_years_notct),
        #CT
        Value = Value / num_years
      )
    subtitle <- if_else(is.na(subtitle) &
                          per == "year", "Rate per year", subtitle)
  }
  if(!centered_at_0 & min(data$Value, na.rm = T) < 0){
    cat("Warning: negative Values in data\n")
  }
  region = NA
  if (!is.na(region_fips)[1]) {
      region = county_map |>
        filter(fips %in% region_fips) |>
        group_by() |>
        st_union()
  }
  if(!is.null(MSA_map)){
    map = MSA_map |>
      full_join(data, by = join_by(metro_name == name)) |>
      rename(name = metro_name) #streamline this later
  } else{
    map <- county_map |>
      full_join(data, by = "fips")
  }
  #switched to full_join here to keep PR for inset. I don't think it would mess with the mapping
  
  if(!is.na(cbsa)){
    merge_MSAs = T #you would only supply a cbsa code if you're merging by MSA
    cat("CBSA code supplied. Merging by MSA...\n")
  }
  if(merge_MSAs){ #Make sure MSAs dataframe is loaded in
    map <- map |>
      left_join(MSAs, by = "fips") |>
        mutate(metro_name = if_else(is.na(metro_name), name, metro_name),
        metro_name = if_else(str_detect(county, "Ag District"), county, metro_name) #Although I won't really be using this option for Ag Maps, this still seems like good practice
        )
    if(!is.na(region_fips)[1]){
      map <- map |>
        group_by(metro_name) |>
        mutate(num_counties = n())|> #if region_fips overlaps with MSAs, we don't merge that MSA
        filter(!(fips %in% region_fips)) |> #so that partially overlapping MSAs have the right populations
      mutate(metro_name = if_else(num_counties == n(), metro_name, name)) |> #drop CBSA Title/name for counties removed because they are in region_fips)
      ungroup()
    }
      map <- map |>
      group_by(metro_name, cbsa_code) |> #don't really need to be grouping by CBSA code here
      summarize(
        geometry = st_union(geometry),
        across(contains("pop"), ~sum(.x)),
        sqmi = sum(sqmi),
        Value = sum(Value, na.rm = T)) |>
      ungroup() |>
  mutate(Value = if_else(Value == 0, NA, Value))
    
map$centroid = st_centroid(map$geometry)
map <- map |>
  mutate(centroid = st_centroid(geometry),
         x = st_coordinates(centroid)[, 1],
         y = st_coordinates(centroid)[, 2],
         name = metro_name) |>
  select(-centroid)
  }
  if(!is.null(MSA_map)){
    merge_MSAs = T #if we used a different method to get merged MSAs, we will still follow the merged MSA logic for the rest of the function
  }
  
  if (na_to_0) {
    map <- map |>
      mutate(Value = replace_na(Value, 0))
  } 
  if (imputed_to_na) {
    map <- map |>
      mutate(imputed = if_else(is.na(imputed), FALSE, imputed),
             Value = if_else(imputed, NA, Value))
  }

  dollar <- ""
  if (str_detect(unit, "\\$")) {
    dollar <- "$"
    unit <- str_remove(unit, "\\$")
  } else if (unit == "%") {
    map <- map |>
      mutate(Value = 100 * Value)
  } else if (!str_detect(unit, "[/:]")) {#ratios and rates don't have the space before
    unit <- paste0(" ", unit)
  }
  
    caption_manual <- ifelse(!str_detect(caption_manual, "\n$") & caption_manual != "", str_c(caption_manual, "\n"), caption_manual) #make sure manual caption ends in \n

    if(last_year > 2021){
       caption_manual = paste0(caption_manual, "Connecticut data is ",first_year,"-",2021,"\n") #mapping function uses CT historical counties and the last year the IRS reported by CT historical counties was 2021
    }
    caption <- paste0("Source: ",first_year, "-", last_year," IRS Migration Data\n")
    caption <- paste0(caption, caption_manual, "Created in R")
  
    if(per %in% c("capita", "year")){
      pop_cols <- paste0("pop", substr(years, 3, 4))
      map <- map %>%
        rowwise() %>%
        mutate(
          avg_pop = mean(c_across(all_of(pop_cols)), na.rm = T), #I need to get 1990-2010 populations or else this is quite bad
          avg_pop = ifelse(is.na(avg_pop) | avg_pop == 0, pop, avg_pop), # Default to "pop" if missing
          pop = avg_pop #if pop is the inset cutoff this matters
        ) %>%
        ungroup()
    }
  
  per_capita_result <- handle_per_capita(map, per, subtitle)
  map <- per_capita_result$map
  subtitle <- per_capita_result$subtitle
  
  map <- map |>
    mutate(cutoff = !!rlang::sym(cutoff_column))

  if(centered_at_0){
    inset_style = "split" #only looking at one way wouldn't make sense
  }
  
  if (inset_style == "hidden") {
    inset_text <- ""
  } else if (inset_style %in% c("top", "bottom")) {
    inset_text <- create_inset(map, inset_style, 10, inset_cutoff, cutoff_column, dollar, unit, merge_MSAs, netmigration)
  } else if (inset_style == "split") {
    top <- create_inset(map, "top", 5, inset_cutoff, cutoff_column, dollar, unit, merge_MSAs, netmigration)
    bottom <- create_inset(map, "bottom", 5, inset_cutoff, cutoff_column, dollar, unit, merge_MSAs, netmigration)
    inset_text = paste0(top, bottom)
  }
  
    if (continental) { #filter out AK and HI after inset
    if(!merge_MSAs){
    map <- map |>
      filter(!abbr %in% c("AK", "HI", "PR")) 
    } else{
     map <- map |>
      filter(!str_detect(name, ", HI"),
             !str_detect(name, ", AK"),
             !str_detect(name, ", PR"))  
    }
    state_map <- state_map |>
      filter(!abbr %in% c("AK", "HI", "PR"))
  }
  
  map <- map |>
    filter(!st_is_empty(geometry))
  
    #better code has been written
  if(is.na(max_bubble_size) & bubbles){
  map <- map |>
    mutate(abs_value = abs(Value))
  max = max(map$abs_value, na.rm = T)
  bubble <- map |>
    select(abs_value) |>
    mutate(normalized_bubble_size = abs_value/max,
           normalized_bubble_size = replace_na(normalized_bubble_size, 0))
  inflation_factor = 3000/sum(bubble$normalized_bubble_size) #3000 was arrived at by trial and error
  max_bubble_size = sqrt(max(bubble$normalized_bubble_size)*inflation_factor) #bubble size is in terms of radius not area
  cat("Auto max bubble size: ", max_bubble_size, "\n")
  }
  if (bubbles) {
    plot <- handle_bubbles(map, state_map, max_bubble_size, low_color, high_color, countylines, dollar, unit, region, highlight_color, netmigration)
  } else {
    chloropleth <- handle_chloropleth(map, state_map, breaks, labels_manual, low_color, high_color, countylines, dollar, unit, region, highlight_color, netmigration, centered_at_0)
    plot = chloropleth$plot
    breaks = chloropleth$breaks
  }
  
  plot <- add_theme(plot, title, subtitle, font_size, caption, inset_text, breaks, bubbles, max_bubble_size, continental)
  
  if (!is.na(breaks[1])) {
    plot <- plot +
      theme(legend.key = element_rect(fill = NA, color = "black", size = 0.5))
  }
  
  ggsave(filename = paste0(graphicspath, str_remove_all(title, " "), ".jpg"), plot = plot, dpi = 300, width = 10, height = 10)
}
```
##helper functions
```{r}
compute_breaks <- function(values) {
  max_value <- max(values, na.rm = TRUE)
  min_value <- max(min(values , na.rm = TRUE),1)
  
  # Get the powers of 10 between min_value and max_value
  powers_of_10 <- 10^(ceiling(log10(min_value)):floor(log10(max_value)))
  
  # Check if max_value exceeds the highest power of 10 by more than 5x
  if (max_value > 5 * max(powers_of_10)) {
    powers_of_10 <- c(powers_of_10, 5 * max(powers_of_10))
  } else if(max_value > 2 * max(powers_of_10)){
    powers_of_10 <- c(powers_of_10, 2 * max(powers_of_10))
  }
  
  # Combine the values and return unique, sorted breaks
  breaks <- sort(unique(powers_of_10))
  if (length(breaks) > 4) {
    breaks <- tail(breaks, 4)
  }
  return(breaks)
}
round_to_sigfigs <- function(value, sigfigs, method = c("floor", "ceiling")) {
  method <- match.arg(method)
  if (value <= 0) return(0)
  
  # Calculate the scale factor based on the significant figures
  scale_factor <- 10^(floor(log10(abs(value))) - (sigfigs - 1))
  
  if (method == "floor") {
    return(floor(value / scale_factor) * scale_factor)
  } else if (method == "ceiling") {
    return(ceiling(value / scale_factor) * scale_factor)
  }
}
append_unit <- function(dollar, unit) {
  function(x)
    paste0(dollar, comma_format()(x), unit)
}
shorten <- function(value) {
  if (abs(value) > 999999999) {
    return(paste0(signif(value / 1000000000, 3), "b")) #signif rounds to a given number of sigfigs
  } else if (abs(value) > 999999) {
    return(paste0(signif(value / 1000000, 3), "m"))
  } else if (abs(value) > 9999) {
    return(paste0(signif(value / 1000, 3), "k"))
  } else if (abs(value) > 10) {
    return(comma_format()(round(value, 0)))
  } else{
    return(signif(value, 3))
  }
}
```

#get_migration_data
```{r}
get_migration_data <- function(data, region_fips, migration_type, simulate){
  data = data |>
    mutate(gravity = (sender_pop)*(receiver_pop)/(dist^0.64)) #empirical estimate for Chicago for the maps for the slideshow. Exponents on populations were close to 1
  
  #user supplies region_fips to specify a region, or none for total
    if(migration_type == "in"){
        if(!is.na(region_fips)[1]){
          data <- data |>
            filter(receiver_FIPS %in% region_fips, !sender_FIPS %in% region_fips)
        }
          data <- data |>
        group_by(sender_FIPS) |>
        summarize(Value = sum(people_flow, na.rm = T),
                  gravity = sum(gravity, na.rm = T)) |>
        filter(!is.na(Value)) |>
        rename(fips = sender_FIPS)
    } else if(migration_type == "out"){
      if(!is.na(region_fips)[1]){
        data <- data |>
        filter(sender_FIPS %in% region_fips, !receiver_FIPS %in% region_fips)
      }
      data <- data |>
        group_by(receiver_FIPS) |>
        summarize(Value = sum(people_flow, na.rm = T),
                  gravity = sum(gravity, na.rm = T))|>
        filter(!is.na(Value)) |>
        rename(fips = receiver_FIPS)
    } else if(migration_type == "net"){ #simulate doesn't work with net migraation because gravity model predicts 0 net migration
      if(!is.na(region_fips)[1]){
      data <- data |>
          filter(sender_FIPS %in% region_fips, !receiver_FIPS %in% region_fips)
      } #I rewrote this without testing so it might be wrong
        data <- data |>
        group_by(receiver_FIPS) |>
        summarize(people_flow = sum(people_flow, na.rm = T),
                  people_counterflow = sum(people_counterflow, na.rm = T)) |>
        mutate(net = people_flow - people_counterflow,
               ratio = people_flow/people_counterflow,
               logratio = log(ratio)) |>
        rename(fips = receiver_FIPS)
      
        data <- data |>
          rename(Value = net) #might add option to graph ratios etc later
    } else {
      cat("Migration type not recognized.")
      quit()
    }
  if(simulate){
    scaling = sum(data$Value)/sum(data$gravity)
    
    data = data |>
      mutate(Value = gravity*scaling)
  }
    
  return(data)
}
```


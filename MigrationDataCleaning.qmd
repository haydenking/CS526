---
title: "MigrationDataCleaning"
format: html
editor: visual
---

```{r}
wd = "/Users/Hayden/CS526/" #Customize as needed
datapath = paste0(wd, "Data/")
graphicspath = paste0(wd, "Maps/")
library(tidyverse)
library(readr)
library(stringr)
library(geosphere)
library(ggplot2)

library(usmap)
```

#I use sf to find the centroids but this is for measuring (effective) distances between counties for the gravity model

```{r}
clean_pop_centroids <- function(centroid_data) {
  colnames(centroid_data) = c("st_FIPS", "co_FIPS", "county", "state", "population", "lat", "long")
centroid_data <- centroid_data |>
  mutate(long = str_remove(long, "\\\\"),
         long = as.numeric(long),
         FIPS = paste0(st_FIPS, co_FIPS)) |>
  select(-population)
return(centroid_data)
}

  #2020 US Census county population centroids found here: https://www.census.gov/geographies/reference-files/time-series/geo/centers-population.html
pop_centroids = clean_pop_centroids(read_csv(paste0(datapath,"county_pop_centroids_2020.txt")))

#Because CT now uses Planning Regions instead of counties, I use geographic centroids from https://www.census.gov/geographies/reference-files/time-series/geo/gazetteer-files.2024.html#list-tab-264479560 instead of population centroids (which were based on historical counties)
CT = read.table(paste0(wd,"2024_Gaz_counties_national.txt"), sep = '\t', header = TRUE) |>
  filter(USPS == "CT") |>
  select(USPS, GEOID, NAME, INTPTLAT, INTPTLONG) |>
  mutate(FIPS = sprintf("%05d", as.integer(GEOID)), #Make sure FIPS code is 5 digits
      st_FIPS = substr(FIPS, 1, 2),
    co_FIPS = substr(FIPS, 3, 5)) |>
  select(-GEOID) |>
  rename(state = USPS,
         county = NAME,
         lat = INTPTLAT,
         long = INTPTLONG)

pop_centroids = rbind(pop_centroids, CT) #add 9 CT planning regions

#Add disused Census divisions from 2010 census (Some in Alaska, Virginia, Shannon, SD)
#Shannon County, SD was renamed in 2015 and some areas in Virginia and Alaska don't appear in the 2020 centroids, so I add them in using the centroids from 2010
pop_centroids_2010 = clean_pop_centroids(read_csv(paste0(datapath,"county_pop_centroids_2010.txt"))) |>
  filter(state %in% c("Alaska", "Virginia") | county == "Shannon")

#centroids are virtually identical over time, so I just use the same ones no matter the year
pop_centroids = rbind(pop_centroids, pop_centroids_2010) |>
  group_by(st_FIPS, co_FIPS) |>
  slice_head(n=1) |> #Just keep one centroid per county
  ungroup()

#On a long enough timeframe, pop centroids might change enough for it to be worth using different vintages of data

add_centroids <-function(data, pop_centroids){
  data <- data %>%
  left_join(pop_centroids %>%
              select(lat, long, FIPS) %>%
              rename(sender_lat = lat, sender_long = long,
                     sender_FIPS = FIPS),
            by = "sender_FIPS")
data <- data %>%
  left_join(pop_centroids %>%
              select(lat, long, FIPS) %>%
              rename(receiver_lat = lat, receiver_long = long,
                receiver_FIPS = FIPS), 
            by = "receiver_FIPS")

data <- data %>%
  mutate(dist = pmap_dbl(
    list(receiver_long, receiver_lat, sender_long, sender_lat),
    ~ distHaversine(c(..1, ..2), c(..3, ..4)) / 1609.34 #meters to miles
  ))
return(data)
}
```

#IRS Data Cleaning
```{r}
#data from: https://www.irs.gov/statistics/soi-tax-stats-migration-data
clean_IRS <- function(inflow_data, outflow_data, year2) {
 #y1 is sender, y2 is receiver
  if(year2 == 2014){ #there seems to have been some issue in 2013-2014
    inflow_data = distinct(inflow_data)
  outflow_data = distinct(outflow_data)
  }
   inflow_data <- inflow_data |>
  rename(households_flow = n1,
         people_flow = n2,
         sender_county = y1_countyname,
         sender_state = y1_state) |>
  mutate(sender_st_FIPS = sprintf("%02s", y1_statefips), #20-21 and 21-22 have FIPS codes as numbers, the rest have them as characters
         sender_co_FIPS = sprintf("%03s", y1_countyfips),
         receiver_st_FIPS = sprintf("%02s", y2_statefips),
         receiver_co_FIPS = sprintf("%03s", y2_countyfips),
         sender_FIPS = paste0(sender_st_FIPS, sender_co_FIPS),
         receiver_FIPS = paste0(receiver_st_FIPS, receiver_co_FIPS),
         households_flow = if_else(households_flow == -1, NA, households_flow),
         people_flow = if_else(people_flow == -1, NA, people_flow),
         agi_flow = if_else(agi == -1, NA, agi)) |>
  select(-y1_countyfips, -y2_countyfips, -y1_statefips, -y2_statefips, -agi) |>
      filter(!(str_detect(sender_county, "Other flows")),
             receiver_co_FIPS != "000") #remove state summary rows
    
outflow_data <- outflow_data |>
  rename(households_counterflow = n1,
         people_counterflow = n2,
         receiver_county = y2_countyname,
         receiver_state = y2_state) |>
  mutate(sender_st_FIPS = sprintf("%02s", y1_statefips), #20-21 and 21-22 have FIPS codes as numbers, the rest have them as characters
         sender_co_FIPS = sprintf("%03s", y1_countyfips),
         receiver_st_FIPS = sprintf("%02s", y2_statefips),
         receiver_co_FIPS = sprintf("%03s", y2_countyfips),
         sender_FIPS = paste0(sender_st_FIPS, sender_co_FIPS),
         receiver_FIPS = paste0(receiver_st_FIPS, receiver_co_FIPS),
         households_counterflow = if_else(households_counterflow == -1, NA, households_counterflow),
         people_counterflow = if_else(people_counterflow == -1, NA, people_counterflow),
         agi_counterflow = if_else(agi == -1, NA, agi)) |>
  select(-y1_countyfips, -y2_countyfips, -y1_statefips, -y2_statefips, -agi) |>
      filter(!(str_detect(receiver_county, "Other flows")),
             sender_co_FIPS != "000") #remove state summary rows

inflow_totals = inflow_data |>
  filter(str_detect(sender_county, "Total Migration") | (sender_FIPS == receiver_FIPS))
#totals has total migration summary rows and non-migrants
outflow_totals = outflow_data |>
  filter(str_detect(receiver_county, "Total Migration") | (sender_FIPS == receiver_FIPS))

inflow_data = inflow_data |>
  filter(!str_detect(sender_county, "Total Migration")) |>
  mutate(sender_county = str_remove(sender_county, " Non-migrants"))

outflow_data = outflow_data |>
  filter(!str_detect(receiver_county, "Total Migration")) |>
  mutate(receiver_county = str_remove(receiver_county, " Non-migrants"))

IRS_data = full_join(inflow_data, outflow_data , by = join_by("sender_co_FIPS" == "receiver_co_FIPS", "receiver_co_FIPS" == "sender_co_FIPS" ,"sender_st_FIPS" == "receiver_st_FIPS",  "receiver_st_FIPS" == "sender_st_FIPS" ,"sender_FIPS" == "receiver_FIPS", "receiver_FIPS" == "sender_FIPS")) |>
  select(-receiver_county, -receiver_state)
#the only issue remaining is that the receiver county names actually represent the sender's county name. I fix this later

totals = full_join(inflow_totals, outflow_totals, by = join_by("sender_co_FIPS" == "receiver_co_FIPS", "receiver_co_FIPS" == "sender_co_FIPS" ,"sender_st_FIPS" == "receiver_st_FIPS",  "receiver_st_FIPS" == "sender_st_FIPS" ,"sender_FIPS" == "receiver_FIPS", "receiver_FIPS" == "sender_FIPS"))

  IRS_data <- IRS_data |>
    mutate(
      sender_county = if_else(str_detect(sender_county, "Do.a Ana County"), "Do単a Ana County", sender_county),
      year = year2)
  
    totals <- totals |>
    mutate(
      sender_county = if_else(str_detect(sender_county, "Do.a Ana County"), "Do単a Ana County", sender_county),
      receiver_county = if_else(str_detect(receiver_county, "Do.a Ana County"), "Do単a Ana County", receiver_county),
      year = year2)
  #Fixes name of Do単a Ana County, NM

  
  return(list(IRS_data = IRS_data, totals = totals))
}
```

#Reads in 1991-2022 IRS migration data
```{r}
irs_data = NULL
totals = NULL
for(y2 in (12:22)) {
  y1 = y2 -1
  y1y2 = paste0(sprintf("%02d", y1), sprintf("%02d", y2))
  clean = clean_IRS(read_csv(paste0(datapath,"countyinflow", y1y2, ".csv")), 
                    read_csv(paste0(datapath,"countyoutflow", y1y2, ".csv")), 
                    2000 + y2)
  irs_data = rbind(irs_data, clean$IRS_data)
  totals = rbind(totals, clean$totals)
}

irs_data <- irs_data |>
  mutate(sender_county = str_remove(sender_county, "Foreign - ")) #clean the foreign region names

# irs_data = irs_data |>
#   filter(sender_FIPS != receiver_FIPS) #remove non-migrants

county_names <- irs_data |>
  select(sender_county, sender_state, sender_FIPS, year) |>
  rename(receiver_county = sender_county,
         receiver_state = sender_state,
         receiver_FIPS = sender_FIPS) |>
  group_by(receiver_FIPS) |>
  arrange(desc(year)) |> #I do this to get only the most recent name in the case of the counties/census areas that got renamed
  slice_head() |>
  select(-year)
#foreign - overseas was discontinued in 2016 and virgin islands in 2021

irs_data = irs_data |>
  left_join(county_names) #joining on receiver_county and receiver_state
#Shannon County, SD and two Alaskan Census Areas got renamed, but the FIPS codes stayed the same

irs_data <- irs_data |>
  filter(!((sender_county == "Washington County" | receiver_county == "Washington County") & sender_state == "KS" & sender_FIPS != receiver_FIPS & (people_flow > 1000 | people_counterflow > 1000)))
 #there seems to be an issue with 2012 where a few Kansas counties received most of their population in migrants from Washington County, KS. Solution: drop three observations from 2012 where Washington County, KS sent over 1000 households (its population is ~5000) and one with no recipient (??)
#missing one with very high in-migration

#https://osf.io/wgcf3/?view_only=c5ba62fb4821421ea0621bfd0d723e61
#county_migration_data.csv has data on 1991-2011

# irs_data_old = read_csv("Data/county_migration_data.csv")
# irs_data_old <- irs_data_old |>
#   rename(sender_FIPS = origin,
#          receiver_FIPS = destination) |>
#   filter(sender_FIPS != "99999",
#          receiver_FIPS != "99999") |> #these represent other (censored) flows and idk what we'd do with them
#   pivot_longer(cols = `1990`:`2010`, names_to = "year", values_to = "people_flow") |>
#   mutate(year = as.numeric(year) + 1, #they use the first of the two years, I use the second
#          people_flow = if_else(people_flow == -1, NA, people_flow)) 
# 
# # #create flow-counterflow data
# counterflow = irs_data_old |>
#   mutate(sender = receiver_FIPS,
#          receiver_FIPS = sender_FIPS,
#          sender_FIPS = sender) |>
#   rename(people_counterflow = people_flow) |>
#   mutate(people_counterflow = if_else(people_counterflow == -1, NA, people_counterflow)) |>
#   select(-sender)
# 
# irs_data_old <- irs_data_old |>
#   full_join(counterflow, by = c("sender_FIPS", "receiver_FIPS", "year")) |>
#   filter(!(people_flow == 0 & people_counterflow == 0))
# 
# #migration probably follows a poisson distribution. Maybe we could impute the censored stuff?
# 
# #join the old data onto the new
# irs_data_merged = bind_rows(irs_data, irs_data_old) |>
#   select(-sender_st_FIPS, -sender_co_FIPS, -receiver_st_FIPS, -receiver_co_FIPS) #we don't really need these

# irs_data_merged <- irs_data_merged |>
#   filter(substr(sender_FIPS,1,2) != "57") #Remove immigration rows

sender_county_names <- irs_data |>
  select(sender_FIPS, sender_county, sender_state, year) |>
  filter(!is.na(sender_county), !is.na(sender_state)) |>
  group_by(sender_FIPS) |>
  arrange(desc(year)) |>
  slice_head(n=1) |> #keep only the newest name in the case of counties that got renamed so that everything can be standardized
  ungroup() |>
  select(-year)

irs_data <- irs_data |>
  group_by(sender_FIPS) |>
  arrange(desc(year)) |>
  mutate(sender_county = head(sender_county, n=1),
         sender_state = head(sender_state, n=1)) |>
  ungroup() |>
  group_by(receiver_FIPS) |>
  arrange(desc(year)) |> 
  mutate(receiver_county = head(receiver_county, n=1),
         receiver_state = head(receiver_state, n=1)) |>
  ungroup() |>
  mutate(people_flow = replace_na(people_flow, 0),
         people_counterflow = replace_na(people_counterflow, 0))

irs_data = add_centroids(irs_data, pop_centroids) #this part is really inefficient. I should join to just one year and then use fill() I think

#note that non-migrant rows are kept as of now

totals <- totals %>%
  mutate(migration_group = case_when(sender_FIPS == "96000" ~ "Total_migration",
                                     sender_FIPS == "97000" ~ "US_migration",
                                     sender_FIPS == "97001" ~ "Instate",
                                     sender_FIPS == "97003" ~ "Diffstate",
                                     sender_FIPS == "98000" ~ "Foreign", #includes Military and Expats
                                     T ~ "Nonmigrant")) %>%
  filter(!(year == 2012 & str_detect(sender_county, "Republic|Washington|Cloud|Jewell|Smith") & sender_state == "KS" )) |>
  select(-sender_county) |>
  pivot_wider(
    id_cols = c(receiver_FIPS, year),
    names_from = migration_group,
    values_from = c(households_flow, people_flow, agi_flow, households_counterflow, people_counterflow, agi_counterflow),
    names_glue = "{migration_group}_{.value}"
  )
```

#Add county-level populations
```{r}
library(readxl)
# pops9000 <- readr::dead_delim("https://www2.census.gov/programs-surveys/popest/tables/1990-2000/estimates-and-change-1990-2000/2000c8_00.txt") #need to clean this
# 
# #https://www.census.gov/data/datasets/time-series/demo/popest/intercensal-2000-2010-counties.html
# pops0010 <- read_csv(paste0(datapath,"county_pops_2000-2010.csv")) |>
#   filter(COUNTY != 0) |>
#   mutate(fips = paste0(sprintf("%02s",STATE), sprintf("%03s",COUNTY))) |>
#   rename_with(~ str_replace(.x, "POPESTIMATE", "pop")) |>
#   select(contains("pop20"), fips)
# pops1019 <- read_excel(paste0(datapath,"county_pops10-19.xlsx"))
# pops2023 <- read_excel(paste0("county_pops20-23.xlsx"))

county_pops = totals |> 
  mutate(receiver_pop = Total_migration_people_counterflow + Nonmigrant_people_flow) |> 
  select(receiver_FIPS, receiver_pop, year)

irs_data <- irs_data_merged |>
  left_join(county_pops, by = c("year", "receiver_FIPS"))

county_pops <- county_pops |>
  rename(sender_FIPS = receiver_FIPS,
         sender_pop = receiver_pop)

irs_data <- irs_data |>
  left_join(county_pops, by = c("year", "sender_FIPS"))

```

```{r}
#save IRS data so you don't have to do this all the time
#write.csv(irs_data_merged, paste0(datapath, "irs_migration_data_1991-2022.csv"), row.names = FALSE)

#write.csv(irs_data, paste0(datapath, "irs_migration_data_2012-2022.csv"), row.names = FALSE)
#write.csv(totals, paste0(datapath, "irs_data_totals_2012-2022.csv"), row.names = FALSE)
```

#That concludes the data cleaning section

#Read in the clean data
```{r suppress = TRUE}
data = read_csv(paste0(datapath,"irs_migration_data_1991-2022.csv"))
totals = read_csv(paste0(datapath, "irs_data_totals_2012-2022.csv"))
```

```{r}
irs_data <- irs_data |>
  mutate(gravity = (sender_pop/1000)*(receiver_pop/1000)/(dist^1.5), #empirical estimates of distance decay are generally less than 2, exponents on people are generally 0.8 to 0.9 (Poot et al. 2016)
         instate = sender_state == receiver_state)
#In an ideal world the exponents would be exactly 1 I think, but the IRS data are imperfect and the granularity of the counties has an impact as well. Perhaps the empirical estimates are subject to various data quality issues, but I haven't done any research on that.
```

#This is code for looking up a county's FIPS code
```{r}
#county lookup
data |>
  filter(sender_state == "IN",
         sender_county == "Lake County") |>
  select(sender_FIPS, sender_county) |>
  unique()
```
